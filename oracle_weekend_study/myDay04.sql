/*JOIN*/
/*
 * 여러 테이블에 흩어져 있는 정보 중
 * 사용자가 필요한 정보만 가져와서 가상의 테이블처럼 만들고 결과를 보여주는 것.
 * 정규화를 통해 조회 테이블이 너무 많이 쪼개져 있으면 작업이 불편하기 때문에
 * 입력, 수정, 삭제의 성능을 향상시키기 위해서 JOIN을 통해 합친 후 사용한다.
 * 
 * */

/*EMP 테이블 사원번호로 DEPT 테이블의 지역 검색*/
SELECT * FROM EMP;
SELECT * FROM DEPT;

SELECT ENAME, LOC
FROM DEPT D JOIN EMP E 
ON D.DEPTNO = E.DEPTNO;

/*PLAYER 테이블에서 송종국 선수가 속한 팀의 전화번호 검색하기*/
SELECT T.TEAM_ID, P.PLAYER_NAME ,T.TEL FROM PLAYER P JOIN TEAM T
ON P.TEAM_ID = T.TEAM_ID 
AND P.PLAYER_NAME = '송종국';

/*JOBS 테이블에서 JOB_ID로 직원들의 JOB_TITLE, EMAIL, 성, 이름 검색*/
SELECT J.JOB_ID, J.JOB_TITLE , E.EMAIL, E.FIRST_NAME 성, E.LAST_NAME 이름 FROM JOBS J JOIN EMPLOYEES E 
ON J.JOB_ID = E.JOB_ID;

/*EMP 테이블의 SAL을 SALGRADE 테이블의 등급으로 나누기*/
SELECT * FROM EMP;
SELECT * FROM SALGRADE;
SELECT E.*, S.* FROM EMP E JOIN SALGRADE S ON E.SAL >= S.LOSAL AND E.SAL <= S.HISAL;
SELECT E.*, S.GRADE FROM EMP E JOIN SALGRADE S ON E.SAL >= S.LOSAL AND E.SAL <= S.HISAL;

/*세타 조인*/
SELECT *
FROM SALGRADE S, EMP E
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

/*EMPLOYEES 테이블에서 HIREDATE가 2003~2005년까지인 사원의 정보와 부서명 검색*/
SELECT * FROM EMPLOYEES
WHERE HIRE_DATE BETWEEN '20030101' AND '20051231';

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, HIRE_DATE FROM EMPLOYEES
WHERE HIRE_DATE BETWEEN '20030101' AND '20051231';

SELECT D.DEPARTMENT_NAME, E.* 
FROM EMPLOYEES E JOIN DEPARTMENTS D ON
E.DEPARTMENT_ID = D.DEPARTMENT_ID AND
E.HIRE_DATE BETWEEN TO_DATE('2003','YYYY') AND TO_DATE('2005','YYYY');

SELECT SYS_CONTEXT('USERENV', 'NLS_DATE_FORMAT') FROM DUAL;
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY';
ALTER SESSION SET NLS_DATE_FORMAT = 'RR/MM/DD';

/*JOB_TITLE 중 'Manager'라는 문자열이 포함된 직업들의 평균 연봉을 JOB_TITLE별로 검색*/
SELECT * FROM JOBS;
SELECT * FROM JOBS
WHERE JOB_TITLE LIKE '%Manager';

SELECT * FROM JOBS J JOIN EMPLOYEES E 
ON J.JOB_ID = E.JOB_ID
WHERE JOB_TITLE LIKE '%Manager';

SELECT JOB_TITLE, AVG(E.SALARY) "평균 연봉" FROM JOBS J JOIN EMPLOYEES E 
ON J.JOB_ID = E.JOB_ID
AND JOB_TITLE LIKE '%Manager%'
GROUP BY JOB_TITLE;

/*EMP 테이블에서 ENAME에 L이 있는 사원들의 DNAME과 LOC 검색*/
SELECT * FROM EMP
WHERE ENAME LIKE '%L%';

SELECT ENAME, DNAME, LOC FROM DEPT D JOIN EMP E 
ON D.DEPTNO = E.DEPTNO
AND ENAME LIKE '%L%';

/*축구 선수들 중에서 각 팀별로 키가 가장 큰 선수들 전체 정보 검색*/
SELECT * FROM PLAYER;
SELECT TEAM_ID, MAX(HEIGHT) FROM PLAYER
GROUP BY TEAM_ID
ORDER BY TEAM_ID;

SELECT TEAM_ID, MAX(HEIGHT) FROM PLAYER
GROUP BY TEAM_ID
ORDER BY TEAM_ID;

SELECT * FROM PLAYER P JOIN (SELECT TEAM_ID, MAX(HEIGHT) "HEIGHT" FROM PLAYER
GROUP BY TEAM_ID
ORDER BY TEAM_ID) P2
ON P.TEAM_ID = P2.TEAM_ID
GROUP BY P2.TEAM_ID;

SELECT P.* FROM (SELECT TEAM_ID, MAX(HEIGHT) "MAX_HEIGHT" FROM PLAYER
GROUP BY TEAM_ID) P2 JOIN PLAYER P
ON P2.TEAM_ID = P.TEAM_ID AND P2.MAX_HEIGHT = P.HEIGHT
ORDER BY 3;

SELECT P.* FROM (SELECT TEAM_ID, MAX(HEIGHT) "MAX_HEIGHT" FROM PLAYER
GROUP BY TEAM_ID) P2 JOIN PLAYER P
ON P2.TEAM_ID = P.TEAM_ID AND P2.MAX_HEIGHT = P.HEIGHT
ORDER BY P.TEAM_ID;

/*(A, B) IN (C, D) : A = C AND B = D*/
SELECT * FROM PLAYER
WHERE (TEAM_ID, HEIGHT) IN (SELECT TEAM_ID, MAX(HEIGHT) FROM PLAYER GROUP BY TEAM_ID)
ORDER BY TEAM_ID;

/*EMP 테이블에서 사원의 이름과 매니저 이름을 검색*/
SELECT * FROM EMP;

SELECT E2.EMPNO "사원 번호", E2.ENAME "사원의 이름", E2.MGR "매니저의 사원 번호", E1.ENAME "매니저의 이름" FROM EMP E1 JOIN EMP E2
ON E1.EMPNO = E2.MGR
ORDER BY E2.EMPNO;

/*[브론즈]*/
/*PLAYER 테이블에서 키가 NULL인 선수들은 키를 170으로 변경하여 평균 구하기(NULL 포함)*/
SELECT * FROM PLAYER;
SELECT AVG(HEIGHT) FROM PLAYER;
SELECT AVG(NVL(HEIGHT, 170)) AS "평균 키" FROM PLAYER;

/*[실버]*/
/*PLAYER 테이블에서 팀 별 최대 몸무게*/
SELECT * FROM PLAYER;
SELECT TEAM_ID, MAX(WEIGHT) FROM PLAYER
GROUP BY TEAM_ID
ORDER BY TEAM_ID;

SELECT MAX(WEIGHT) FROM PLAYER 
WHERE TEAM_ID = 'K02';

/*[골드]*/
/*AVG 함수를 쓰지 않고 PLAYER 테이블에서 선수들의 평균 키 구하기(NULL 포함)*/
SELECT (NVL(HEIGHT,0)) FROM PLAYER;
SELECT AVG((NVL(HEIGHT,0))) FROM PLAYER;
SELECT SUM((NVL(HEIGHT,0))) / COUNT((NVL(HEIGHT,0))) "평균 키" FROM PLAYER;

/*[플래티넘]*/
/*DEPT 테이블의 LOC별 평균 급여를 반올림한 값과 각 LOC별 SAL 총 합을 조회, 반올림 : ROUND()*/
SELECT * FROM DEPT;
SELECT * FROM EMP;

SELECT LOC 지역, ROUND(AVG(SAL), 2) "평균 급여", SUM(SAL) "총 급여의 합" FROM DEPT D JOIN EMP E 
ON D.DEPTNO = E.DEPTNO
GROUP BY LOC;

/*[다이아]*/
/*PLAYER 테이블에서 팀별 최대 몸무게인 선수 검색*/
SELECT * FROM PLAYER;
SELECT TEAM_ID, MAX(WEIGHT) FROM PLAYER 
GROUP BY TEAM_ID
ORDER BY TEAM_ID;

SELECT P.* FROM (SELECT TEAM_ID, MAX(WEIGHT) "MAX_WEIGHT" FROM PLAYER
GROUP BY TEAM_ID) P2 JOIN PLAYER P
ON P2.TEAM_ID = P.TEAM_ID AND P2.MAX_WEIGHT = P.WEIGHT
ORDER BY P.TEAM_ID;

/*[마스터]*/
/*EMP 테이블에서 HIREDATE가 FORD의 입사년도와 같은 사원 전체 정보 조회*/
SELECT * FROM EMP
WHERE HIREDATE = (SELECT HIREDATE FROM EMP WHERE ENAME = 'FORD');

SELECT * FROM EMP
WHERE TO_CHAR(HIREDATE, 'YYYY') = TO_CHAR((SELECT HIREDATE FROM EMP WHERE ENAME = 'FORD'), 'YYYY');

/*외부 조인*/
/*JOIN 할 때 선행 또는 후행 중 하나의 테이블 정보를 모두 확인하고 싶을 때 사용한다.*/
SELECT NVL(TEAM_NAME,'공용'), S.*
FROM TEAM T RIGHT OUTER JOIN STADIUM S 
ON T.TEAM_ID = S.HOMETEAM_ID;

/*DEPARTMENT 테이블에서 매니저 이름 검색, 매니저가 없더라도 부서명 모두 검색*/
SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES;

SELECT D.DEPARTMENT_NAME, NVL(E.LAST_NAME, 'NO') || ' ' || NVL(E.FIRST_NAME, 'NAME'), E.JOB_ID
FROM DEPARTMENTS D  LEFT OUTER JOIN EMPLOYEES E 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID AND E.EMPLOYEE_ID = D.MANAGER_ID;


/*EMPLOYEES 테이블에서 사원의 매니저 이름, 사원의 이름 조회, 매니저가 없는 사원은 본인이 매니저임을 표시*/
SELECT * FROM EMPLOYEES;
SELECT * FROM EMP;

SELECT (E2.LAST_NAME || ' ' || E2.FIRST_NAME) "사원의 이름", (NVL(E1.LAST_NAME , E2.LAST_NAME) || ' ' || NVL(E1.FIRST_NAME, E2.FIRST_NAME)) "매니저의 이름"
FROM EMPLOYEES E1 RIGHT OUTER JOIN EMPLOYEES E2
ON E1.EMPLOYEE_ID  = E2.MANAGER_ID
ORDER BY E2.EMPLOYEE_ID;

/*EMPLOYEES에서 각 사원별로 관리부서(매니저)와 소속부서(사원) 조회*/
SELECT E1.JOB_ID 관리부서, E2.JOB_ID 소속부서, E2.FIRST_NAME 이름
FROM
(
   SELECT JOB_ID, MANAGER_ID FROM EMPLOYEES
   GROUP BY JOB_ID, MANAGER_ID
) E1 
FULL OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID
ORDER BY 소속부서 DESC;

/*VIEW*/
/*CREATE VIEW [이름] AS [쿼리문]*/
/* 
 * 기존의 테이블을 그대로 놔둔 채 필요한 컬럼들 및 새로운 컬럼을 만든 가상 테이블
 * 실제 데이터가 저정되는 것은 아니지만 VIEW를 통해서 데이터를 관리할 수 있다.
 * 
 * - 독립성 : 다른 곳에서 접근하지 못하도록 하는 성질
 * - 편리성 : 길고 복잡한 쿼리문을 매번 작성할 필요가 없다.
 * - 보안성 : 기존의 쿼리문이 보이지 않는다.
 * 
 * */

/*PLAYER 테이블에 나이 컬럼 추가한 뷰 만들기*/
CREATE VIEW VIEW_PLAYER AS
SELECT FLOOR((SYSDATE - BIRTH_DATE) / 365) AGE, P.* FROM PLAYER P;

SELECT * FROM VIEW_PLAYER WHERE AGE < 40;

/*EMPLOYEES 테이블에서 사원 이름과 그 사원의 매니저 이름이 있는 VIEW 만들기*/
CREATE VIEW VIEW_EMPLOYEES_MANAGER_NAME AS 
SELECT (E2.LAST_NAME || ' ' || E2.FIRST_NAME) "사원의 이름", (E1.LAST_NAME || ' ' || E1.FIRST_NAME) "매니저의 이름"
FROM EMPLOYEES E1 JOIN EMPLOYEES E2
ON E1.EMPLOYEE_ID  = E2.MANAGER_ID
ORDER BY E2.EMPLOYEE_ID;

SELECT "사원의 이름" FROM VIEW_EMPLOYEES_MANAGER_NAME;
SELECT * FROM VIEW_EMPLOYEES_MANAGER_NAME;

DROP VIEW VIEW_EMPLOYEES_MANAGER_NAME;


/*PLAYER 테이블에서 TEAM_NAME 컬럼을 추가한 VIEW 만들기*/
SELECT * FROM PLAYER;
SELECT * FROM TEAM;

CREATE VIEW VIEW_PLAYER_TEAM AS 
SELECT T.TEAM_NAME "TEAM_NAME" ,P.* FROM TEAM T JOIN PLAYER P
ON T.TEAM_ID = P.TEAM_ID;

SELECT * FROM VIEW_PLAYER_TEAM;




